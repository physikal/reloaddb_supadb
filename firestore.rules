rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is event owner
    function isEventOwner(eventData) {
      return isAuthenticated() && eventData.ownerId == request.auth.uid;
    }

    // Helper function to check if user is invited to event
    function isInvitedToEvent(eventData) {
      return isAuthenticated() && request.auth.token.email in eventData.invitedPlayers;
    }

    // Helper function to check if user is event participant
    function isEventParticipant(eventData) {
      return isAuthenticated() && request.auth.uid in eventData.currentPlayers;
    }

    // Helper function to check if user is group owner
    function isGroupOwner(groupData) {
      return isAuthenticated() && groupData.ownerId == request.auth.uid;
    }

    // Helper function to check if user is group member
    function isGroupMember(groupData) {
      return isAuthenticated() && request.auth.uid in groupData.members;
    }

    // Helper function to check if user is invited to group
    function isInvitedToGroup(groupData) {
      return isAuthenticated() && request.auth.token.email in groupData.invitedMembers;
    }

    // Helper function to validate tournament template data
    function isValidTournamentTemplate(data) {
      return data.size() > 0 
        && data.name is string 
        && data.name.size() > 0
        && data.ownerId is string
        && data.blindTemplate is map
        && data.chipTemplate is map
        && data.updatedAt is string;
    }

    // User profiles
    match /users/{userId} {
      // Allow reading any user profile if authenticated
      allow read: if isAuthenticated();
      // Only allow users to create/update their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.currentPlayers;
      
      allow update: if isAuthenticated() && (
        // Owner can update any field
        isEventOwner(resource.data) ||
        // Invited players can join or decline
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentPlayers', 'invitedPlayers']) &&
          (isEventOwner(resource.data) || isInvitedToEvent(resource.data)) &&
          // When declining, only remove from invitedPlayers
          (
            (request.resource.data.currentPlayers == resource.data.currentPlayers &&
             request.resource.data.invitedPlayers == resource.data.invitedPlayers.removeAll([request.auth.token.email])) ||
            // When accepting, add to currentPlayers and remove from invitedPlayers
            (request.resource.data.currentPlayers == resource.data.currentPlayers.concat([request.auth.uid]) &&
             request.resource.data.invitedPlayers == resource.data.invitedPlayers.removeAll([request.auth.token.email]))
          ) &&
          // Ensure other fields remain unchanged
          request.resource.data.title == resource.data.title &&
          request.resource.data.date == resource.data.date &&
          request.resource.data.location == resource.data.location &&
          request.resource.data.buyIn == resource.data.buyIn &&
          request.resource.data.maxPlayers == resource.data.maxPlayers &&
          request.resource.data.ownerId == resource.data.ownerId
        ) ||
        // Participants can leave
        (
          isEventParticipant(resource.data) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentPlayers']) &&
          request.resource.data.currentPlayers == resource.data.currentPlayers.removeAll([request.auth.uid]) &&
          // Ensure other fields remain unchanged
          request.resource.data.title == resource.data.title &&
          request.resource.data.date == resource.data.date &&
          request.resource.data.location == resource.data.location &&
          request.resource.data.buyIn == resource.data.buyIn &&
          request.resource.data.maxPlayers == resource.data.maxPlayers &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.invitedPlayers == resource.data.invitedPlayers
        )
      );
      
      allow delete: if isEventOwner(resource.data);
    }

    // Groups collection rules
    match /groups/{groupId} {
      // Allow reading only if user is a member, owner, or invited
      allow read: if isAuthenticated() && (
        isGroupMember(resource.data) || 
        isGroupOwner(resource.data) || 
        isInvitedToGroup(resource.data)
      );
      
      // Allow creating new groups
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.members;
      
      // Allow updates by owner or invited members joining/declining
      allow update: if isAuthenticated() && (
        // Group owner can update any field
        isGroupOwner(resource.data) ||
        // Invited members can join or decline
        (isInvitedToGroup(resource.data) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'invitedMembers']) &&
         (
           // When declining, only remove from invitedMembers
           (request.resource.data.members == resource.data.members &&
            request.resource.data.invitedMembers == resource.data.invitedMembers.removeAll([request.auth.token.email])) ||
           // When accepting, add to members and remove from invitedMembers
           (request.resource.data.members == resource.data.members.concat([request.auth.uid]) &&
            request.resource.data.invitedMembers == resource.data.invitedMembers.removeAll([request.auth.token.email]))
         ) &&
         request.resource.data.name == resource.data.name &&
         request.resource.data.description == resource.data.description &&
         request.resource.data.ownerId == resource.data.ownerId &&
         request.resource.data.createdAt == resource.data.createdAt &&
         request.resource.data.updatedAt == resource.data.updatedAt) ||
        // Members can remove themselves
        (isGroupMember(resource.data) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
         request.resource.data.members == resource.data.members.removeAll([request.auth.uid]) &&
         request.resource.data.name == resource.data.name &&
         request.resource.data.description == resource.data.description &&
         request.resource.data.ownerId == resource.data.ownerId &&
         request.resource.data.invitedMembers == resource.data.invitedMembers &&
         request.resource.data.createdAt == resource.data.createdAt &&
         request.resource.data.updatedAt == resource.data.updatedAt)
      );
      
      // Allow deletion by owner
      allow delete: if isGroupOwner(resource.data);
    }

    // Locations collection rules
    match /locations/{locationId} {
      // Allow reading own locations
      allow read: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Allow creating new locations
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      
      // Allow updating own locations
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Allow deleting own locations
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Tournament templates collection rules
    match /tournamentTemplates/{templateId} {
      // Allow reading own templates
      allow read: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Allow creating new templates
      allow create: if isAuthenticated() 
        && request.resource.data.ownerId == request.auth.uid
        && isValidTournamentTemplate(request.resource.data)
        && request.resource.data.createdAt is string;
      
      // Allow updating own templates
      allow update: if isAuthenticated()
        && resource.data.ownerId == request.auth.uid
        && request.resource.data.ownerId == request.auth.uid
        && isValidTournamentTemplate(request.resource.data);
      
      // Allow deleting own templates
      allow delete: if isAuthenticated()
        && resource.data.ownerId == request.auth.uid;
    }
  }
}